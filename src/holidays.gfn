<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="holidays" needs-time-series-data="true" minver="2020a">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.1</version>
<date>2020-05-18</date>
<description>Retrieve list of holiday series</description>
<tags>C81</tags>
<help>
This package returns country specific holidays in an easy manner. Currently the package comprises holidays for Germany only. However, some events -- such as Christmas days -- are also valid for many other countries.

Please ask questions and report bugs on the gretl mailing list if possible. Alternatively, open an issue ticket on my github repo.
Source code and test script(s) can be found here:
https://github.com/atecon/holidays

The package comprises four public functions. First, the user calls the holiday() function for obtaining a bundle of various binary series named according to a specific holiday.
Second, the get_list_of_holidays() function is a convenience function, and appends the list of series from the previously returned bundle to the current data set. You may specify a string array for retrieving only specific holiday series.
Third, the print_names_of_holidays() function simply prints all holidays in the compiled bundle.
Fourth, the get_names_of_holidays() function returns a string array including the names of holidays compiled.

Note: The package only works if a time-series data set with periodicity 7 days is active. In case your active time-series data set has a 5 days periodicity, you may join the 7 days time-series to it.
Also, if you actually want to make use of holidays series for a panel data set, you need to join these to your panel data set by means of gretl's &quot;join&quot; or &quot;append&quot; command.


PUBLIC FUNCTIONS:
-----------------------------------------------------------------------
Function:		holidays()
Arguments:		country_name (string, e.g. 'de')
Output:         bundle

Return:
Bundle comprising a binary time-series for each holiday. The binary series takes the value of one if the specific holiday occurs at a certain date, otherwise zero.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       get_list_of_holidays()
Arguments:      B (bundle returned by holidays() function)
				S (some arbitrary series of the active data set)
				hd (string array of holiday series to return, optional)
Output:         list

Return:
This convenience function appends all series of holidays in the bundle returned by the holidays() function to the active time-series data set. If one wants to retrieve only specific holidays, these can be defined by the optional string array 'hd'.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       get_names_of_holidays()
Arguments:      B (bundle returned by holidays() function)
Output:         string array

Return:
This convenience function returns a string array holding all names of holidays compiled after having called holidays() function.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       print_names_of_holidays()
Arguments:      B (bundle returned by holidays() function)
Output:         none

Return:
This convenience function print the unique names of holidays compiled after having called holidays() function.
-----------------------------------------------------------------------


================
Adding holidays
================
Currently the package provides holidays only for Germany. If you would like to add holiday information for other countries that would be great! These are the steps to be done in case you want to add holidays for a new country:

1) Add a two-letter country flag to the 'countries' string array in
function countries_supported().
2) Add the corresponding case to the get_holidays() function.
3) Copy the days_with_fixed_date_de() function, name your new function days_with_fixed_date_&lt;COUNTRYFLAG&gt;() and define your set of holidays accordingly.
4) Copy the days_related_to_eastern_de function, name your new function days_related_to_eastern_&lt;COUNTRYFLAG&gt;() and define your set of holidays accordingly.

I recommend you to fork the source code from the github repo (https://github.com/atecon/holidays) and to send a pull request to me. However, if you are not familiar with the versioning tool git, you may contact me via email: &lt;atecon@posteo.de&gt;



Changelog:
- v0.1, May 2020:
	+ initial release
</help>
<depends count="1">
string_utils </depends>
<gretl-function name="holidays" type="bundle">
 <params count="1">
  <param name="country" type="string"/>
 </params>
<code>/* Return list of binary series each refering to some holiday.
return: bundle, Includes all series defined for teh country of choice. */
bundle self = null
errorif(($datatype != 2), &quot;Data set must be of type 'time-series'.&quot;)
errorif(($pd != 7), &quot;Periodicity of the time-series data set must be 7 days.&quot;)
string self.country = tolower(country)
errorif(!nelem(instrings(countries_supported(), self.country)),    sprintf(&quot;Country '%s' not supported.&quot;, self.country))
get_date_series(&amp;self)
get_holidays(&amp;self)
drop_bundle_items(&amp;self)
return self
</code>
</gretl-function>
<gretl-function name="get_list_of_holidays" type="list">
 <params count="3">
  <param name="self" type="bundle" const="true"/>
  <param name="y" type="series" const="true">
<description>Arbitrary series needed</description>
  </param>
  <param name="holiday_names" type="strings" optional="true" const="true">
<description>Holidays to retrieve</description>
  </param>
 </params>
<code>/* Convenience function returning list of holiday series from
bundle. Note: Series 'y' is needed such that series in L
get appended to data set. */
list L = null
if !exists(holiday_names)
  strings holiday_names = get_names_of_holidays(self)
endif
loop foreach i holiday_names
  if holiday_names[i] != &quot;country&quot;
    catch list L += genseries(holiday_names[i], self.$i)
    if $error
      printf &quot;\nError: Requested holiday '%s' not part of bundle.  				Ignored.&quot;, holiday_names[i]
    endif
  endif
endloop
return L
</code>
</gretl-function>
<gretl-function name="get_names_of_holidays" type="strings">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Convenience function returning a string array of names of holidays
computed after having called the holiday() function. */
strings holiday_names = strdrop(getkeys(self), &quot;country&quot;)
return holiday_names
</code>
</gretl-function>
<gretl-function name="print_names_of_holidays" type="void">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Convenience function printing names of holidays
computed after having called the holiday() function. */
strings holiday_names = get_names_of_holidays(self)
printf &quot;\nNames of holidays included in the bundle:\n&quot;
loop foreach i holiday_names -q
  printf &quot;%s\n&quot;, holiday_names[i]
endloop
</code>
</gretl-function>
<gretl-function name="countries_supported" type="strings" private="1">
<code>/* List of countries supported. */
strings countries = defarray(&quot;de&quot;)
return  countries
</code>
</gretl-function>
<gretl-function name="get_holidays" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Wrapper actually calling country-specific function. */
if self.country == &quot;de&quot;
  get_holidays_de(&amp;self)
endif
</code>
</gretl-function>
<gretl-function name="drop_bundle_items" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Drop some items before returning to user. */
delete self.month
delete self.year
delete self.day
</code>
</gretl-function>
<gretl-function name="get_holidays_de" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Legal holidays are those which apply to all Bundesl√§nder. */
days_with_fixed_date_de(&amp;self)
days_related_to_eastern_de(&amp;self)
sundays_of_advent(&amp;self)
</code>
</gretl-function>
<gretl-function name="sundays_of_advent" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Determine the date for each of the four Sundays, and return list
of Advent series. */
matrix years = values(self.year)
series self.advent_1 = 0
series self.advent_2 = 0
series self.advent_3 = 0
series self.advent_4 = 0
loop i=1..rows(years)
  scalar shift_by_days = weekday(years[i], 12, 24)
  if shift_by_days != 0			# not a Sunday
    scalar weekday_sunday_before_2412 =   weekday(years[i], 12, (24 - shift_by_days))
  endif
  scalar advent_4 = isodate(epochday(years[i], 12, 24) - shift_by_days)
  scalar advent_3 = isodate(epochday(advent_4) - 7)
  scalar advent_2 = isodate(epochday(advent_3) - 7)
  scalar advent_1 = isodate(epochday(advent_2) - 7)
  self.advent_4 = ($obsdate == advent_4) ? 1 : self.advent_4
  self.advent_3 = ($obsdate == advent_3) ? 1 : self.advent_3
  self.advent_2 = ($obsdate == advent_2) ? 1 : self.advent_2
  self.advent_1 = ($obsdate == advent_1) ? 1 : self.advent_1
endloop
</code>
</gretl-function>
<gretl-function name="days_with_fixed_date_de" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* German holidays with a fixed date each year. */
series self.neujahr = (self.month == 1 &amp;&amp; self.day == 1) ? 1 : 0
series self.erster_mai = (self.month == 5 &amp;&amp; self.day == 1) ? 1 : 0
series self.weihnachtstag_1 = (self.month == 12 &amp;&amp; self.day == 25) ? 1 : 0
series self.weihnachtstag_2 = (self.month == 12 &amp;&amp; self.day == 26) ? 1 : 0
series self.silvester = (self.month == 12 &amp;&amp; self.day == 31) ? 1 : 0
series self.tag_der_deutschen_einheit = (self.month == 10   &amp;&amp; self.day == 3) ? 1 : 0
series self.frauentag = (self.month == 3 &amp;&amp; self.day == 8) ? 1 : 0
series self.kindertag = (self.month == 6 &amp;&amp; self.day == 1) ? 1 : 0
series self.reformationstag = (self.month == 10 &amp;&amp; self.day == 31) ? 1 : 0
series self.allerheiligen = (self.month == 11 &amp;&amp; self.day == 1) ? 1 : 0
series self.nikolaus = (self.month == 12 &amp;&amp; self.day == 6) ? 1 : 0
series self.valentinstag = (self.month == 2 &amp;&amp; self.day == 14) ? 1 : 0
</code>
</gretl-function>
<gretl-function name="days_related_to_eastern_de" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Days related to Easter Sunday in a fixed manner.*/
series self.ostersonntag = get_easter_sunday(self)
series self.weiberfastnacht = self.ostersonntag(+52)
self.weiberfastnacht = misszero(self.weiberfastnacht)
series self.rosenmontag = self.ostersonntag(+48)
self.rosenmontag = misszero(self.rosenmontag)
series self.aschermittwoch = self.ostersonntag(+46)
self.aschermittwoch = misszero(self.aschermittwoch)
series self.gruendonnerstag = self.ostersonntag(+3)
self.gruendonnerstag = misszero(self.gruendonnerstag)
series self.karfreitag = self.ostersonntag(+2)
self.karfreitag = misszero(self.karfreitag)
series self.ostermontag = self.ostersonntag(-1)
self.ostermontag = misszero(self.ostermontag)
series self.christihimmelfahrt = self.ostersonntag(-39)
self.christihimmelfahrt = misszero(self.christihimmelfahrt)
series self.pfingstsonntag = self.ostersonntag(-49)
self.pfingstsonntag = misszero(self.pfingstsonntag)
series self.pfingstmontag = self.ostersonntag(-50)
self.pfingstmontag = misszero(self.pfingstmontag)
series self.fronleichnam = self.ostersonntag(-60)
self.fronleichnam = misszero(self.fronleichnam)
</code>
</gretl-function>
<gretl-function name="get_easter_sunday" type="series" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Retrieve series of Easter Sundays
return: type, description */
matrix years = values(self.year)
series easter_sunday = 0
loop i=1..rows(years)
  scalar e = easterday(years[i])
  scalar m = floor(e)
  scalar d = round(100*(e-m))
  easter_sunday = (self.year == years[i]    &amp;&amp; self.month == m &amp;&amp; self.day == d) ? 1 : easter_sunday
endloop
return easter_sunday
</code>
</gretl-function>
<gretl-function name="get_date_series" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Retrieve some date series. */
series y, m, d
isoconv($obsdate, &amp;y, &amp;m, &amp;d)
series self.year = y
series self.month = m
series self.day = d
</code>
</gretl-function>
<sample-script>
clear
set verbose off

# Define some daily time-series data set
nulldata 800
setobs 7 2018-01-01 --time-series

include holidays.gfn


# Obtain holidays for Germany
bundle HD = holidays(&quot;de&quot;)
print HD

# Retrieve holidays as list of binary series
list L = get_list_of_holidays(HD, index)
L
summary L --simple
print L -o --range=1:10

# Return names of holidays as string array
strings holiday_names = get_names_of_holidays(HD)
eval holiday_names[1]
eval holiday_names[6]

# Print names of holidays in bundle HD
print_names_of_holidays(HD)
</sample-script>
</gretl-function-package>
</gretl-functions>
